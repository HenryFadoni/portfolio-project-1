name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: portfolio-app
  ECS_SERVICE: portfolio-dev-service
  ECS_CLUSTER: portfolio-dev-cluster
  CONTAINER_NAME: portfolio-app

jobs:
  # Job 1: Code Quality and Testing
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-asyncio httpx
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests with pytest
      run: |
        # Create test directory if it doesn't exist
        mkdir -p tests
        # Run pytest (will find tests automatically)
        pytest tests/ -v || echo "No tests found - creating placeholder"

  # Job 2: Build and Push Docker Image
  build:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: development
    
    outputs:
      image-tag: ${{ steps.image.outputs.tag }}
      image-uri: ${{ steps.image.outputs.uri }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION

    - name: Build, tag, and push image to Amazon ECR
      id: image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Output image details
        echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # Job 3: Terraform Plan
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: test
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: |
        terraform plan -no-color -out=tfplan
      env:
        TF_VAR_container_image: ${{ needs.build.outputs.image-uri || 'nginx:latest' }}

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      if: github.ref == 'refs/heads/main'
      with:
        name: terraform-plan
        path: tfplan

  # Job 4: Terraform Apply (only on main branch)
  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [build, terraform-plan]
    if: github.ref == 'refs/heads/main'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Init
      run: terraform init

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

  # Job 5: Deploy to ECS with Blue/Green
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: [build, terraform-apply]
    if: github.ref == 'refs/heads/main'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download current task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition $ECS_SERVICE \
          --query taskDefinition > task-definition.json

    - name: Update task definition with new image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ needs.build.outputs.image-uri }}

    - name: Create CodeDeploy deployment config if not exists
      run: |
        aws deploy get-deployment-config \
          --deployment-config-name CodeDeployDefault.ECSAllAtOnceBlueGreen || \
        aws deploy create-deployment-config \
          --deployment-config-name ECSBlueGreenCustom \
          --compute-platform ECS \
          --blue-green-deployment-configuration '{
            "deploymentReadyOption": {
              "actionOnTimeout": "CONTINUE_DEPLOYMENT"
            },
            "terminateBlueInstancesOnDeploymentSuccess": {
              "action": "TERMINATE",
              "terminationWaitTimeInMinutes": 5
            }
          }' || true

    - name: Create CodeDeploy application if not exists
      run: |
        aws deploy get-application --application-name $ECS_SERVICE-app || \
        aws deploy create-application \
          --application-name $ECS_SERVICE-app \
          --compute-platform ECS

    - name: Create CodeDeploy deployment group if not exists
      run: |
        aws deploy get-deployment-group \
          --application-name $ECS_SERVICE-app \
          --deployment-group-name $ECS_SERVICE-dg || \
        aws deploy create-deployment-group \
          --application-name $ECS_SERVICE-app \
          --deployment-group-name $ECS_SERVICE-dg \
          --service-role-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/CodeDeployServiceRole \
          --blue-green-deployment-configuration '{
            "deploymentReadyOption": {
              "actionOnTimeout": "CONTINUE_DEPLOYMENT"
            },
            "terminateBlueInstancesOnDeploymentSuccess": {
              "action": "TERMINATE",
              "terminationWaitTimeInMinutes": 5
            }
          }' \
          --load-balancer-info '{
            "targetGroupInfoList": [
              {
                "name": "'$ECS_SERVICE'-tg"
              }
            ]
          }' \
          --ecs-services '[
            {
              "serviceName": "'$ECS_SERVICE'",
              "clusterName": "'$ECS_CLUSTER'"
            }
          ]' || true

    - name: Deploy to Amazon ECS with Blue/Green
      id: deploy
      run: |
        # Create appspec.yml for CodeDeploy
        cat > appspec.yml << EOF
        version: 0.0
        Resources:
          - TargetService:
              Type: AWS::ECS::Service
              Properties:
                TaskDefinition: <TASK_DEFINITION>
                LoadBalancerInfo:
                  ContainerName: "$CONTAINER_NAME"
                  ContainerPort: 8080
        EOF

        # Create deployment
        DEPLOYMENT_ID=$(aws deploy create-deployment \
          --application-name $ECS_SERVICE-app \
          --deployment-group-name $ECS_SERVICE-dg \
          --deployment-config-name CodeDeployDefault.ECSAllAtOnceBlueGreen \
          --description "GitHub Actions deployment $(date)" \
          --revision '{
            "revisionType": "String",
            "string": {
              "content": "'"$(cat appspec.yml | base64 -w 0)"'"
            }
          }' \
          --query 'deploymentId' --output text)
        
        echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
        echo "Deployment ID: $DEPLOYMENT_ID"

    - name: Wait for deployment to complete
      run: |
        echo "Waiting for deployment ${{ steps.deploy.outputs.deployment-id }} to complete..."
        
        aws deploy wait deployment-successful \
          --deployment-id ${{ steps.deploy.outputs.deployment-id }} \
          --cli-read-timeout 1800 \
          --cli-connect-timeout 60

    - name: Check deployment status
      id: deployment-status
      run: |
        STATUS=$(aws deploy get-deployment \
          --deployment-id ${{ steps.deploy.outputs.deployment-id }} \
          --query 'deploymentInfo.status' --output text)
        
        echo "status=$STATUS" >> $GITHUB_OUTPUT
        echo "Deployment status: $STATUS"
        
        if [ "$STATUS" != "Succeeded" ]; then
          echo "Deployment failed with status: $STATUS"
          exit 1
        fi

  # Job 6: Rollback on Failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure() && github.ref == 'refs/heads/main'
    environment: development
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Stop failed deployment
      run: |
        # Stop the current deployment if it's still running
        aws deploy stop-deployment \
          --deployment-id ${{ needs.deploy.outputs.deployment-id }} \
          --auto-rollback-enabled || true

    - name: Rollback to previous task definition
      run: |
        # Get the previous task definition
        PREVIOUS_TASK_DEF=$(aws ecs list-task-definitions \
          --family-prefix $ECS_SERVICE \
          --status ACTIVE \
          --sort DESC \
          --query 'taskDefinitionArns[1]' \
          --output text)
        
        if [ "$PREVIOUS_TASK_DEF" != "None" ] && [ "$PREVIOUS_TASK_DEF" != "" ]; then
          echo "Rolling back to: $PREVIOUS_TASK_DEF"
          
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $PREVIOUS_TASK_DEF \
            --force-new-deployment
            
          # Wait for rollback to complete
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE
            
          echo "Rollback completed successfully"
        else
          echo "No previous task definition found for rollback"
        fi

    - name: Notify rollback
      run: |
        echo "::error::Deployment failed and rollback was triggered"
        echo "::notice::Service has been rolled back to the previous stable version"

  # Job 7: Health Check Post-Deployment
  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy]
    if: success() && github.ref == 'refs/heads/main'
    environment: development
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get Load Balancer DNS
      id: lb-dns
      run: |
        LB_DNS=$(aws elbv2 describe-load-balancers \
          --names portfolio-dev-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text)
        echo "dns=$LB_DNS" >> $GITHUB_OUTPUT

    - name: Health Check
      run: |
        echo "Performing health check on http://${{ steps.lb-dns.outputs.dns }}/health"
        
        # Wait a bit for the service to be ready
        sleep 30
        
        # Retry health check up to 10 times
        for i in {1..10}; do
          if curl -f -s "http://${{ steps.lb-dns.outputs.dns }}/health"; then
            echo "Health check passed!"
            exit 0
          fi
          echo "Health check attempt $i failed, retrying in 30 seconds..."
          sleep 30
        done
        
        echo "Health check failed after 10 attempts"
        exit 1
